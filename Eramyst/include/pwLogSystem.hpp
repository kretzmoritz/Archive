#ifndef PWLOGSYSTEM
#define PWLOGSYSTEM

#ifndef PWSYSTEM
#ifdef PWUSEGLOBALSINGLETONS
#define glLog pwLog::get()
#endif
#endif

#include <string>
#include <fstream>
#include <iomanip>
#include <time.h>

namespace pwLogType
{
    enum pwLogType{
        pwLTError = 0,
        pwLTCaution = 1,
        pwLTInfo = 2
    };
}

////////////////////////////////////////////////////////////////
// Writes info-, caution- and error-messages to a logfile
////////////////////////////////////////////////////////////////
class pwLog
{

public:

    ////////////////////////////////////////////////////////////////
    // Default constructor
    ////////////////////////////////////////////////////////////////
    pwLog();

    ////////////////////////////////////////////////////////////////
    // Destructor
    ////////////////////////////////////////////////////////////////
    ~pwLog();

    ////////////////////////////////////////////////////////////////
    // Get the static instance of the pwLog
    //
    // \return Static instance of the pwLog
    ////////////////////////////////////////////////////////////////
    static pwLog* get();

    ////////////////////////////////////////////////////////////////
    // Initialize the logging-system
    //
    // \param FileName: Name of the log-file, that is to be initialized
    //
    // \return True, if initialisation was successful, false otherwise
    ////////////////////////////////////////////////////////////////
    bool Initialize(std::string FileName = "pwLog.html");

    ////////////////////////////////////////////////////////////////
    // Shuts the logging-system down
    //
    // \return True, if shutdown was successful, false otherwise
    ////////////////////////////////////////////////////////////////
	bool Shutdown();

    ////////////////////////////////////////////////////////////////
    // Write a new line in the log-file
    //
    // \param Text: String, that is to be written in the log-file
    // \param Type: Type of log
    //
    // \return True, if writing the line was successful, false otherwise
    ////////////////////////////////////////////////////////////////
    bool WriteLine(std::string Text, pwLogType::pwLogType Type = pwLogType::pwLTError);


private:

    ////////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////////
    static pwLog*  p_inst;
    std::ofstream myLogFile;
    bool          myInitialized;
};

#endif